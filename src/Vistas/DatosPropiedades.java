/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vistas;

import AccesoDatos.PropiedadData;
import AccesoDatos.TipoLocalData;
import AccesoDatos.ZonaData;
import Entidades.PropiedadInmueble;
import Entidades.TipoLocal;
import Entidades.Zona;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author abate
 */
public class DatosPropiedades extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    private DefaultComboBoxModel modelComboZona = new DefaultComboBoxModel();
    private DefaultComboBoxModel modelComboTipoLocal = new DefaultComboBoxModel();
    private DefaultComboBoxModel modelBusquedaXZona = new DefaultComboBoxModel();
    private DefaultComboBoxModel modelBusquedazTipo = new DefaultComboBoxModel();

    ZonaData abmZona = new ZonaData();
    PropiedadData abmPropiedad = new PropiedadData();
    TipoLocalData abmTipoLocal = new TipoLocalData();

    Zona tempZona = null;
    TipoLocal tempTipoLocal = null;
    PropiedadInmueble tempPropiedad = null;

    List<Zona> listaZonas = new ArrayList<>();
    List<TipoLocal> listaTipoLocal = new ArrayList();
    List<PropiedadInmueble> listaXZona = new ArrayList();
    List<PropiedadInmueble> listaxTipo = new ArrayList();

    public DatosPropiedades() {
        initComponents();
        borroFilas();
        armarTabla();
        camposIniciales();
        comboBusquedaPorZona();
        comboBusquedaPorTipo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTablaPropiedades = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jcbZona = new javax.swing.JComboBox<>();
        jcbTipo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtfValorZona = new javax.swing.JTextField();
        jtfValorTipo = new javax.swing.JTextField();
        jbActualizar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jlAdvertenciaValorZona = new javax.swing.JLabel();
        jlAdvertenciaValorTipo = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel1.setText("Actualizacion de Precios para Propiedades");

        jtTablaPropiedades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtTablaPropiedades);

        jLabel2.setText("Buscar por Zona:");

        jLabel3.setText("Buscar por Tipo:");

        jcbZona.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jcbZonaFocusGained(evt);
            }
        });
        jcbZona.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcbZonaMouseClicked(evt);
            }
        });
        jcbZona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbZonaActionPerformed(evt);
            }
        });

        jcbTipo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcbTipoMouseClicked(evt);
            }
        });
        jcbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTipoActionPerformed(evt);
            }
        });

        jLabel4.setText("Valor nuevo:");

        jLabel5.setText("Valor nuevo:");

        jtfValorZona.setText("Porcentaje");
        jtfValorZona.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfValorZonaFocusGained(evt);
            }
        });
        jtfValorZona.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfValorZonaKeyReleased(evt);
            }
        });

        jtfValorTipo.setText("Porcentaje");
        jtfValorTipo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfValorTipoKeyReleased(evt);
            }
        });

        jbActualizar.setText("Actualizar");
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });

        jbCancelar.setText("Cancelar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jLabel6.setText("%");

        jLabel7.setText("%");

        jlAdvertenciaValorZona.setText(" ");

        jlAdvertenciaValorTipo.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcbTipo, 0, 140, Short.MAX_VALUE)
                            .addComponent(jcbZona, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 713, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jbActualizar)
                        .addGap(18, 18, 18)
                        .addComponent(jbCancelar)
                        .addGap(177, 177, 177))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jlAdvertenciaValorTipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlAdvertenciaValorZona, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jtfValorTipo)
                            .addComponent(jtfValorZona, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(304, 304, 304))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(313, 313, 313))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jcbZona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jcbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jtfValorZona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlAdvertenciaValorZona)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jtfValorTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlAdvertenciaValorTipo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbActualizar)
                    .addComponent(jbCancelar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbZonaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jcbZonaFocusGained

    }//GEN-LAST:event_jcbZonaFocusGained

    private void jcbZonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbZonaActionPerformed
        borroFilas();
        jtfValorZona.setEnabled(true);
        jcbTipo.setEnabled(false);
        jtfValorTipo.setEnabled(false);
        if (jcbZona.getSelectedIndex() > 0) {
            listaXZona = abmPropiedad.busquedaXZona(jcbZona.getSelectedIndex() + 1);
            for (PropiedadInmueble propiedadZona : listaXZona) {
                modelo.addRow(new Object[]{propiedadZona.getIdPropiedadInmueble(), propiedadZona.getZona().getNombre(),
                    propiedadZona.getDireccion(), propiedadZona.getTipoLocal().getNombre(), propiedadZona.getPrecioTrazado(),
                    propiedadZona.getEstadoLocal().getNombre(), propiedadZona.getInspector().toString(),
                    propiedadZona.isDisponibilidad(), propiedadZona.getPropietario().toString(),
                    propiedadZona.getCaracteristicasString(), propiedadZona.getAccesibilidad()});
            }
        }
    }//GEN-LAST:event_jcbZonaActionPerformed

    private void jcbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTipoActionPerformed
        borroFilas();
        jtfValorTipo.setEnabled(true);
        jcbZona.setEnabled(false);
        jtfValorZona.setEnabled(false);
        if (jcbTipo.getSelectedIndex() > 0) {
            listaxTipo = abmPropiedad.listadoInmueblexTipo(jcbTipo.getSelectedIndex() + 1);
            for (PropiedadInmueble propiedadTipo : listaxTipo) {
                if(propiedadTipo.getZona().isEstado()){
                modelo.addRow(new Object[]{propiedadTipo.getIdPropiedadInmueble(), propiedadTipo.getZona().getNombre(),
                    propiedadTipo.getDireccion(), propiedadTipo.getTipoLocal().getNombre(), propiedadTipo.getPrecioTrazado(),
                    propiedadTipo.getEstadoLocal().getNombre(), propiedadTipo.getInspector().toString(),
                    propiedadTipo.isDisponibilidad(), propiedadTipo.getPropietario().toString(),
                    propiedadTipo.getCaracteristicasString(), propiedadTipo.getAccesibilidad()});
                }
            }

        }
    }//GEN-LAST:event_jcbTipoActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        jtfValorZona.setText("");
        jtfValorTipo.setText("");
        jcbZona.removeAllItems();
        jcbTipo.removeAllItems();
        comboBusquedaPorZona();
        comboBusquedaPorTipo();
        borroFilas();
        camposIniciales();
        jlAdvertenciaValorZona.setText(" ");
        jlAdvertenciaValorTipo.setText(" ");

    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jcbZonaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcbZonaMouseClicked
//        jtfValorZona.setEnabled(true);
//        jcbTipo.setEnabled(false);
//        jtfValorTipo.setEnabled(false);
    }//GEN-LAST:event_jcbZonaMouseClicked

    private void jcbTipoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcbTipoMouseClicked
//        jtfValorTipo.setEnabled(true);
//        jcbZona.setEnabled(false);
//        jtfValorZona.setEnabled(false);
    }//GEN-LAST:event_jcbTipoMouseClicked

    private void jtfValorZonaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfValorZonaKeyReleased
        jlAdvertenciaValorZona.setFont(new Font("Liberation Sans", Font.PLAIN, 13));
        jlAdvertenciaValorZona.setForeground(Color.red.darker());
        if (jtfValorZona.getText().isEmpty()) {
            jlAdvertenciaValorZona.setText("No puede estar vacio");
            if (jbActualizar.isEnabled()) {
                jbActualizar.setEnabled(false);
            }
        } else {
            jlAdvertenciaValorZona.setText("");
            jtfValorZona.setForeground(Color.black);
            String tomoTexto = "";
            char[] aChar = jtfValorZona.getText().toCharArray();
            int contador = 0;
            for (int i = 0; i < aChar.length; i++) {
                tomoTexto = String.valueOf(aChar[i]);
                if (tomoTexto.equals(".")) {
                    contador++;
                }
                if (contador > 1) {
                    jlAdvertenciaValorZona.setText("Solo un punto");
                    if (jbActualizar.isEnabled()) {
                        jbActualizar.setEnabled(false);
                    }
                    break;
                } else {
                    if (!tomoTexto.matches("[0123456789.]*")) {
                        jlAdvertenciaValorZona.setText("Solo números Reales");
                        if (jbActualizar.isEnabled()) {
                            jbActualizar.setEnabled(false);
                        }
                        break;
                    } else {
                        jlAdvertenciaValorZona.setText("");
                        jbActualizar.setEnabled(true);
                    }
                }
            }
        }
    }//GEN-LAST:event_jtfValorZonaKeyReleased

    private void jtfValorTipoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfValorTipoKeyReleased
        jlAdvertenciaValorTipo.setFont(new Font("Liberation Sans", Font.PLAIN, 13));
        jlAdvertenciaValorTipo.setForeground(Color.red.darker());
        if (jtfValorTipo.getText().isEmpty()) {
            jlAdvertenciaValorTipo.setText("No puede estar vacio");
            if (jbActualizar.isEnabled()) {
                jbActualizar.setEnabled(false);
            }
        } else {
            jlAdvertenciaValorTipo.setText("");
            jtfValorTipo.setForeground(Color.black);
            String tomoTexto = "";
            char[] aChar = jtfValorTipo.getText().toCharArray();
            int contador = 0;
            for (int i = 0; i < aChar.length; i++) {
                tomoTexto = String.valueOf(aChar[i]);
                if (tomoTexto.equals(".")) {
                    contador++;
                }
                if (contador > 1) {
                    jlAdvertenciaValorTipo.setText("Solo un punto");
                    if (jbActualizar.isEnabled()) {
                        jbActualizar.setEnabled(false);
                    }
                    break;
                } else {
                    if (!tomoTexto.matches("[0123456789.]*")) {
                        jlAdvertenciaValorTipo.setText("Solo números Reales");
                        if (jbActualizar.isEnabled()) {
                            jbActualizar.setEnabled(false);
                        }
                        break;
                    } else {
                        jlAdvertenciaValorTipo.setText("");
                        jbActualizar.setEnabled(true);
                    }
                }
            }
        }
    }//GEN-LAST:event_jtfValorTipoKeyReleased

    private void jtfValorZonaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfValorZonaFocusGained
        if (jtfValorZona.getText().isEmpty()) {
            jtfValorZona.setText("Porcentaje");
            jtfValorZona.setForeground(Color.gray);
        } else if (jtfValorZona.getText().equals("Porcentaje")) {
            jtfValorZona.selectAll();
            jtfValorZona.setForeground(Color.black);
        }
    }//GEN-LAST:event_jtfValorZonaFocusGained

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        tempPropiedad = new PropiedadInmueble();
        borroFilas();

        if (jcbZona.getSelectedIndex() > 0) {
            int valorComboZona = jcbZona.getSelectedIndex() + 1;
            float valorNuevoZona = Float.parseFloat(jtfValorZona.getText());
            resetearCampos();
            for (PropiedadInmueble pi : listaXZona) {
                float resultadoZona = pi.getPrecioTrazado() + (pi.getPrecioTrazado() * valorNuevoZona) / 100;
                pi.setPrecioTrazado(resultadoZona);
                abmPropiedad.ActualizarPreciosPorZOna(resultadoZona, pi.getIdPropiedadInmueble());
                
                modelo.addRow(new Object[]{pi.getIdPropiedadInmueble(), pi.getZona().getNombre(),
                    pi.getDireccion(), pi.getTipoLocal().getNombre(), pi.getPrecioTrazado(),
                    pi.getEstadoLocal().getNombre(), pi.getInspector().toString(),
                    pi.isDisponibilidad(), pi.getPropietario().toString(),
                    pi.getCaracteristicasString(), pi.getAccesibilidad()});
            }
            JOptionPane.showMessageDialog(this, "Precios actualizados por Zona");
            
            //resetearCampos();

        } else if (jcbTipo.getSelectedIndex() > 0) {
            int valorComboTipo = jcbTipo.getSelectedIndex() + 1;
            float valorNuevoTipo = Float.parseFloat(jtfValorTipo.getText());
            for (PropiedadInmueble pit : listaxTipo) {
                float resultadoTipo = pit.getPrecioTrazado() + (pit.getPrecioTrazado() * valorNuevoTipo) / 100;
                pit.setPrecioTrazado(resultadoTipo);
                abmPropiedad.ActualizarPreciosPorTipoLocal(resultadoTipo, pit.getIdPropiedadInmueble());
                
                modelo.addRow(new Object[]{pit.getIdPropiedadInmueble(), pit.getZona().getNombre(),
                    pit.getDireccion(), pit.getTipoLocal().getNombre(), pit.getPrecioTrazado(),
                    pit.getEstadoLocal().getNombre(), pit.getInspector().toString(),
                    pit.isDisponibilidad(), pit.getPropietario().toString(),
                    pit.getCaracteristicasString(), pit.getAccesibilidad()});
            }
            JOptionPane.showMessageDialog(this, "Precios actualizados por Tipo");
            //resetearCampos();

        }
    }//GEN-LAST:event_jbActualizarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JComboBox<String> jcbTipo;
    private javax.swing.JComboBox<String> jcbZona;
    private javax.swing.JLabel jlAdvertenciaValorTipo;
    private javax.swing.JLabel jlAdvertenciaValorZona;
    private javax.swing.JTable jtTablaPropiedades;
    private javax.swing.JTextField jtfValorTipo;
    private javax.swing.JTextField jtfValorZona;
    // End of variables declaration//GEN-END:variables

    private void armarTabla() {
        modelo.addColumn("id"); //0
        modelo.addColumn("Zona"); //1
        modelo.addColumn("Dirección"); //2
        modelo.addColumn("Tipo local"); //3
        modelo.addColumn("Precio"); //4
        modelo.addColumn("Estado local"); //5
        modelo.addColumn("Inspector"); //6
        modelo.addColumn("Disponibilidad"); //7
        modelo.addColumn("Propietario"); //8
        modelo.addColumn("Caracteristicas"); //9
        modelo.addColumn("Accesibilidad"); //10
        jtTablaPropiedades.setModel(modelo);
    }

    private void borroFilas() {
        int filas = modelo.getRowCount() - 1;
        for (int i = filas; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    private void camposIniciales() {
        jcbZona.setEnabled(true);
        jcbTipo.setEnabled(true);
        jtfValorZona.setEnabled(false);
        jtfValorTipo.setEnabled(false);
        jbActualizar.setEnabled(false);
        jbCancelar.setEnabled(true);
        jlAdvertenciaValorZona.setText(" ");
        jlAdvertenciaValorTipo.setText(" ");
    }

    private void comboBusquedaPorZona() {
        listaZonas = abmZona.listarZonas();
        for (Zona xZona : listaZonas) {
            if(xZona.isEstado()){
                modelBusquedaXZona.addElement(xZona);
            }
        }
        jcbZona.setModel(modelBusquedaXZona);
    }

    private void comboBusquedaPorTipo() {
        listaTipoLocal = abmTipoLocal.listarTipoLocal();
        for (TipoLocal tpl : listaTipoLocal) {
            modelBusquedazTipo.addElement(tpl);
        }
        jcbTipo.setModel(modelBusquedazTipo);
    }

    private void resetearCampos() {
        jtfValorZona.setText("");
        jtfValorTipo.setText("");
        jlAdvertenciaValorZona.setText(" ");
        jlAdvertenciaValorTipo.setText(" ");
        borroFilas();
    }
}
