/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vistas;

import AccesoDatos.EstadoLocalData;
import AccesoDatos.InspectorData;
import AccesoDatos.PropiedadData;
import AccesoDatos.PropietarioData;
import AccesoDatos.TipoLocalData;
//import AccesoDatos.VendedorData;
import AccesoDatos.ZonaData;
import Entidades.EstadoLocal;
import Entidades.Inspector;
import Entidades.PropiedadInmueble;
import Entidades.Propietario;
import Entidades.TipoLocal;
//import Entidades.Vendedor;
import Entidades.Zona;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kalema
 */
public class VistaPropiedades extends javax.swing.JInternalFrame {

    public DefaultTableModel modelo = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    public DefaultTableModel modeloZona = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    public DefaultTableModel modeloPrecio = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int filas, int columnas) {
            return false;
        }
    };

    public DefaultTableModel modeloxTipo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    private DefaultComboBoxModel modelComboProp = new DefaultComboBoxModel();
    private DefaultComboBoxModel modelComboZona = new DefaultComboBoxModel();
    private DefaultComboBoxModel modelComboVendedor = new DefaultComboBoxModel();
    private DefaultComboBoxModel modelComboInspector = new DefaultComboBoxModel();
    private DefaultComboBoxModel modelComboEstadoLocal = new DefaultComboBoxModel();
    private DefaultComboBoxModel modelComboTipoLocal = new DefaultComboBoxModel();
    private DefaultComboBoxModel modelBusquedaXZona = new DefaultComboBoxModel();
    private DefaultComboBoxModel modelBusquedazTipo = new DefaultComboBoxModel();
    PropietarioData abmProp = new PropietarioData();
    PropiedadData abmPropiedad = new PropiedadData();
    ZonaData abmZona = new ZonaData();
    EstadoLocalData abmEstadoLocal = new EstadoLocalData();
    TipoLocalData abmTipoLocal = new TipoLocalData();
    InspectorData abmInspector = new InspectorData();
    //VendedorData abmVendedor = new VendedorData();
    Propietario tempPropietario = null;
    Zona tempZona = null;
    EstadoLocal tempEstadoLocal = null;
    TipoLocal tempTipoLocal = null;
    Inspector temInspector = null;
    //Vendedor tempVendedor = null;
    PropiedadInmueble tempProp = null;
    //Creo los listados para uso de todo el fomulario
    List<Propietario> listaPropietarios = new ArrayList();
    List<Zona> listaZonas = new ArrayList();
    List<EstadoLocal> listaEstadoLocal = new ArrayList();
    List<TipoLocal> listaTipoLocal = new ArrayList();
    List<Inspector> listaInspector = new ArrayList();
    //List<Vendedor> listaVendedor = new ArrayList();
    //Creo las listas para manejar las altas y modificaciones de los inmuebles
    List<PropiedadInmueble> listaXIDProp = new ArrayList();
    List<PropiedadInmueble> listaXZona = new ArrayList();
    List<PropiedadInmueble> listaxTipo = new ArrayList();

    boolean control = false;
    boolean controlBaja = false;

    /**
     * Creates new form VistaPropiedades
     */
    public VistaPropiedades() {
        initComponents();
        armoTabla();
        armoTablaZona();
        armoTablaRangoPrecios();
        armoTablaxTipo();
        comboPropietarios();
        comboZonas();
        comboEstadoLocal();
        comboTipoLocal();
        comboInspector();
        //comboVendedor();
        combozonaXbusqueda();
        comboDisponibilidad();
        comboBusquedaxTipo();
        camposInicialTabAgregar();
        camposInicioxTipo();
        ZonaDeBaja.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCapasPanelBusquedas = new javax.swing.JTabbedPane();
        jPanelxZona = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablaZonas = new javax.swing.JTable();
        jcbBusquedaXZona = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        ZonaDeBaja = new javax.swing.JLabel();
        jPanelxPrecio = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jtPrecioInicial = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtPrecioFinal = new javax.swing.JTextField();
        jbtBuscarXPrecio = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTablaResltadoxPrecio = new javax.swing.JTable();
        jErrorEtiquetaPrecioInicial = new javax.swing.JLabel();
        jErrorEtiquetaPrecioFinal = new javax.swing.JLabel();
        jErrorBotonBuscar = new javax.swing.JLabel();
        jPanelxTipo = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTablaxTipo = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jcbBusquedaXTipo = new javax.swing.JComboBox<>();
        jPanelAgregar = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jcbListaPropietarios = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jbtAgregarPropietario = new javax.swing.JButton();
        jPanelDatos = new javax.swing.JPanel();
        jtAccesibilidad = new javax.swing.JTextField();
        jtCaracteristicas = new javax.swing.JTextField();
        jtDireccion = new javax.swing.JTextField();
        jcbEstadoLocal = new javax.swing.JComboBox<>();
        jcbTipoLocal = new javax.swing.JComboBox<>();
        jcbZona = new javax.swing.JComboBox<>();
        jcbInspector = new javax.swing.JComboBox<>();
        jtPrecio = new javax.swing.JTextField();
        jcbDisponibilidad = new javax.swing.JComboBox<>();
        jbtAgregar = new javax.swing.JButton();
        jbtModificar = new javax.swing.JButton();
        jbtCancelar = new javax.swing.JButton();
        jLabelInspector = new javax.swing.JLabel();
        jLabelZona = new javax.swing.JLabel();
        jLabelTipoLocal = new javax.swing.JLabel();
        jLabelEstadoLocal = new javax.swing.JLabel();
        jLIdPropiedad = new javax.swing.JLabel();
        jLabelOcultaFilaNum = new javax.swing.JLabel();
        jLAdvertenciaAccesibilidad = new javax.swing.JLabel();
        jLAdvertenciaCaracteristicas = new javax.swing.JLabel();
        jLAdvertenciaDireccion = new javax.swing.JLabel();
        jLAdvertenciaPrecio = new javax.swing.JLabel();
        jLabelZonaInactiva = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablaBusquedaProp = new javax.swing.JTable();
        jbtHabiltarCampos = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jCapasPanelBusquedas.setBackground(new java.awt.Color(255, 255, 255));
        jCapasPanelBusquedas.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        jTablaZonas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTablaZonas);

        jcbBusquedaXZona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbBusquedaXZonaActionPerformed(evt);
            }
        });

        jLabel2.setText("Elija la zona preferida");
        jLabel2.setFocusable(false);

        ZonaDeBaja.setForeground(new java.awt.Color(255, 51, 51));
        ZonaDeBaja.setText("Esta Zona esta dada De Baja");

        javax.swing.GroupLayout jPanelxZonaLayout = new javax.swing.GroupLayout(jPanelxZona);
        jPanelxZona.setLayout(jPanelxZonaLayout);
        jPanelxZonaLayout.setHorizontalGroup(
            jPanelxZonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelxZonaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jcbBusquedaXZona, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(ZonaDeBaja)
                .addContainerGap(553, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1117, Short.MAX_VALUE)
        );
        jPanelxZonaLayout.setVerticalGroup(
            jPanelxZonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelxZonaLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelxZonaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbBusquedaXZona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ZonaDeBaja))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jCapasPanelBusquedas.addTab("Búsqueda por zona", jPanelxZona);

        jLabel3.setText("Ingrese el rango de precios");
        jLabel3.setFocusable(false);

        jtPrecioInicial.setForeground(new java.awt.Color(204, 204, 204));
        jtPrecioInicial.setText("Precio Inicial");
        jtPrecioInicial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtPrecioInicialFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtPrecioInicialFocusLost(evt);
            }
        });
        jtPrecioInicial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtPrecioInicialKeyReleased(evt);
            }
        });

        jLabel5.setText("-");
        jLabel5.setFocusable(false);

        jtPrecioFinal.setForeground(new java.awt.Color(204, 204, 204));
        jtPrecioFinal.setText("Precio Final");
        jtPrecioFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtPrecioFinalFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtPrecioFinalFocusLost(evt);
            }
        });
        jtPrecioFinal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtPrecioFinalKeyReleased(evt);
            }
        });

        jbtBuscarXPrecio.setText("Buscar");
        jbtBuscarXPrecio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jbtBuscarXPrecioFocusGained(evt);
            }
        });
        jbtBuscarXPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtBuscarXPrecioActionPerformed(evt);
            }
        });

        jTablaResltadoxPrecio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTablaResltadoxPrecio);

        jErrorEtiquetaPrecioInicial.setToolTipText("");
        jErrorEtiquetaPrecioInicial.setFocusable(false);

        jErrorEtiquetaPrecioFinal.setFocusable(false);

        javax.swing.GroupLayout jPanelxPrecioLayout = new javax.swing.GroupLayout(jPanelxPrecio);
        jPanelxPrecio.setLayout(jPanelxPrecioLayout);
        jPanelxPrecioLayout.setHorizontalGroup(
            jPanelxPrecioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelxPrecioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelxPrecioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanelxPrecioLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelxPrecioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jErrorEtiquetaPrecioInicial, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jtPrecioInicial, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelxPrecioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelxPrecioLayout.createSequentialGroup()
                                .addComponent(jtPrecioFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jbtBuscarXPrecio))
                            .addGroup(jPanelxPrecioLayout.createSequentialGroup()
                                .addComponent(jErrorEtiquetaPrecioFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jErrorBotonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 368, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelxPrecioLayout.setVerticalGroup(
            jPanelxPrecioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelxPrecioLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelxPrecioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtPrecioInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jtPrecioFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtBuscarXPrecio))
                .addGap(12, 12, 12)
                .addGroup(jPanelxPrecioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jErrorEtiquetaPrecioInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jErrorEtiquetaPrecioFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jErrorBotonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jCapasPanelBusquedas.addTab("Búsqueda por Precio", jPanelxPrecio);

        jTablaxTipo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTablaxTipo);

        jLabel6.setText("Elija el Tipo de Local");

        jcbBusquedaXTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbBusquedaXTipoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelxTipoLayout = new javax.swing.GroupLayout(jPanelxTipo);
        jPanelxTipo.setLayout(jPanelxTipoLayout);
        jPanelxTipoLayout.setHorizontalGroup(
            jPanelxTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelxTipoLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1111, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanelxTipoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbBusquedaXTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelxTipoLayout.setVerticalGroup(
            jPanelxTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelxTipoLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanelxTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbBusquedaXTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jCapasPanelBusquedas.addTab("Búsqueda por Tipo", null, jPanelxTipo, "");

        jPanelAgregar.setFont(new java.awt.Font("Liberation Sans", 0, 15)); // NOI18N

        jLabel4.setText("Elija el propietario");

        jcbListaPropietarios.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jcbListaPropietariosFocusGained(evt);
            }
        });
        jcbListaPropietarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbListaPropietariosActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jbtAgregarPropietario.setText("Agregar Propietario");
        jbtAgregarPropietario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAgregarPropietarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbtAgregarPropietario)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jbtAgregarPropietario)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelDatos.setBackground(new java.awt.Color(204, 227, 213));

        jtAccesibilidad.setForeground(new java.awt.Color(199, 199, 199));
        jtAccesibilidad.setText("Accesibilidad");
        jtAccesibilidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtAccesibilidadFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtAccesibilidadFocusLost(evt);
            }
        });
        jtAccesibilidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtAccesibilidadKeyReleased(evt);
            }
        });

        jtCaracteristicas.setForeground(new java.awt.Color(199, 199, 199));
        jtCaracteristicas.setText("Caracteristicas");
        jtCaracteristicas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtCaracteristicasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtCaracteristicasFocusLost(evt);
            }
        });
        jtCaracteristicas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtCaracteristicasKeyReleased(evt);
            }
        });

        jtDireccion.setForeground(new java.awt.Color(199, 199, 199));
        jtDireccion.setText("Dirección");
        jtDireccion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtDireccionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtDireccionFocusLost(evt);
            }
        });
        jtDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtDireccionKeyReleased(evt);
            }
        });

        jcbEstadoLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbEstadoLocalActionPerformed(evt);
            }
        });

        jcbTipoLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTipoLocalActionPerformed(evt);
            }
        });

        jcbZona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbZonaActionPerformed(evt);
            }
        });

        jcbInspector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbInspectorActionPerformed(evt);
            }
        });

        jtPrecio.setForeground(new java.awt.Color(199, 199, 199));
        jtPrecio.setText("Precio");
        jtPrecio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtPrecioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtPrecioFocusLost(evt);
            }
        });
        jtPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtPrecioKeyReleased(evt);
            }
        });

        jcbDisponibilidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbDisponibilidadActionPerformed(evt);
            }
        });

        jbtAgregar.setText("Agregar");
        jbtAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAgregarActionPerformed(evt);
            }
        });

        jbtModificar.setText("Modificar");
        jbtModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtModificarActionPerformed(evt);
            }
        });

        jbtCancelar.setText("Cancelar");
        jbtCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtCancelarActionPerformed(evt);
            }
        });

        jLabelInspector.setText("Inspector");

        jLabelZona.setText("Zona");

        jLabelTipoLocal.setText("Tipo Local");

        jLabelEstadoLocal.setText("Estado Local");

        jLIdPropiedad.setText("Identificador");

        jLabelOcultaFilaNum.setEnabled(false);

        jLAdvertenciaAccesibilidad.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N

        jLabelZonaInactiva.setForeground(new java.awt.Color(153, 0, 51));

        javax.swing.GroupLayout jPanelDatosLayout = new javax.swing.GroupLayout(jPanelDatos);
        jPanelDatos.setLayout(jPanelDatosLayout);
        jPanelDatosLayout.setHorizontalGroup(
            jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDatosLayout.createSequentialGroup()
                        .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtAccesibilidad, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(jLIdPropiedad, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(jLAdvertenciaAccesibilidad, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtCaracteristicas, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLAdvertenciaCaracteristicas, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLAdvertenciaDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelDatosLayout.createSequentialGroup()
                                .addComponent(jLAdvertenciaPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelOcultaFilaNum, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jbtAgregar)
                                .addGap(18, 18, 18)
                                .addComponent(jbtModificar)
                                .addGap(18, 18, 18)
                                .addComponent(jbtCancelar))
                            .addGroup(jPanelDatosLayout.createSequentialGroup()
                                .addComponent(jtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jcbDisponibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanelDatosLayout.createSequentialGroup()
                        .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabelZonaInactiva, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbZona, javax.swing.GroupLayout.Alignment.LEADING, 0, 130, Short.MAX_VALUE)
                            .addComponent(jLabelZona, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelTipoLocal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbTipoLocal, 0, 130, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jcbEstadoLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelEstadoLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelInspector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbInspector, 0, 130, Short.MAX_VALUE))))
                .addContainerGap(206, Short.MAX_VALUE))
        );
        jPanelDatosLayout.setVerticalGroup(
            jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDatosLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelInspector)
                    .addComponent(jLabelTipoLocal)
                    .addComponent(jLabelEstadoLocal)
                    .addComponent(jLabelZona))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbEstadoLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbTipoLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbInspector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbZona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelZonaInactiva, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtAccesibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtCaracteristicas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbDisponibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanelDatosLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabelOcultaFilaNum, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelDatosLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLAdvertenciaPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLAdvertenciaDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelDatosLayout.createSequentialGroup()
                                        .addComponent(jLAdvertenciaCaracteristicas, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap())
                                    .addGroup(jPanelDatosLayout.createSequentialGroup()
                                        .addComponent(jLAdvertenciaAccesibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanelDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLIdPropiedad, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jbtAgregar)
                                            .addComponent(jbtModificar)
                                            .addComponent(jbtCancelar))
                                        .addGap(11, 11, 11))))))))
        );

        jTablaBusquedaProp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTablaBusquedaProp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablaBusquedaPropMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTablaBusquedaProp);

        jbtHabiltarCampos.setText("Agregar Propiedad");
        jbtHabiltarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtHabiltarCamposActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelAgregarLayout = new javax.swing.GroupLayout(jPanelAgregar);
        jPanelAgregar.setLayout(jPanelAgregarLayout);
        jPanelAgregarLayout.setHorizontalGroup(
            jPanelAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAgregarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanelAgregarLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jcbListaPropietarios, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtHabiltarCampos)
                        .addGap(126, 126, 126)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelAgregarLayout.setVerticalGroup(
            jPanelAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAgregarLayout.createSequentialGroup()
                .addGroup(jPanelAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAgregarLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanelAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jcbListaPropietarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbtHabiltarCampos)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAgregarLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jCapasPanelBusquedas.addTab("Agregar Propiedad", jPanelAgregar);

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel1.setText("GESTIÓN DE PROPIEDADES");
        jLabel1.setFocusable(false);
        jLabel1.setRequestFocusEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCapasPanelBusquedas)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(358, 358, 358))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jCapasPanelBusquedas, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jCapasPanelBusquedas.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtAgregarPropietarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAgregarPropietarioActionPerformed
        // Abrimos el formulario de Propietarios
        GestionPropietarios nuevoProp = new GestionPropietarios();
        MenuPrincipal.escritorio.add(nuevoProp);
        nuevoProp.toFront();
        nuevoProp.setVisible(true);
    }//GEN-LAST:event_jbtAgregarPropietarioActionPerformed

    private void jcbListaPropietariosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jcbListaPropietariosFocusGained
        // Recargo la lista de propietarios
        jcbListaPropietarios.removeAllItems();
        borroFilas();
        comboPropietarios();
    }//GEN-LAST:event_jcbListaPropietariosFocusGained

    private void jcbListaPropietariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbListaPropietariosActionPerformed
        // Con la selección cargo los datos de las propiedades de el propietario seleccionado
        filasTablaResultadoXPropietario();
    }//GEN-LAST:event_jcbListaPropietariosActionPerformed

    private void jbtAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAgregarActionPerformed
        // Construyo los objetos para el objeto inmueble
        PropiedadInmueble paraFila = new PropiedadInmueble();
        tempProp = new PropiedadInmueble();
        tempPropietario = abmProp.buscopPropietario(jcbListaPropietarios.getSelectedIndex() + 1);
        temInspector = abmInspector.buscoInspector(jcbInspector.getSelectedIndex() + 1);
        tempEstadoLocal = abmEstadoLocal.buscoEstadoLocal(jcbEstadoLocal.getSelectedIndex() + 1);
        tempTipoLocal = abmTipoLocal.buscoTipoLocal(jcbTipoLocal.getSelectedIndex() + 1);
        //tempVendedor = abmVendedor.buscoVendedor(jcbVendedor.getSelectedIndex() + 1);
        tempZona = abmZona.buscarZona(jcbZona.getSelectedIndex() + 1);
        boolean valor = false;
        if (jcbDisponibilidad.getSelectedIndex() == 1) {
            valor = true;
        }
        //Construyo el inmueble para agregar a la baze
        tempProp.setPropietario(tempPropietario);
        tempProp.setAccesibilidad(jtAccesibilidad.getText());
        tempProp.setCaracteristicasString(jtCaracteristicas.getText());
        tempProp.setDireccion(jtDireccion.getText());
        tempProp.setEstadoLocal(tempEstadoLocal);
        tempProp.setPrecioTrazado(Float.valueOf(jtPrecio.getText()));
        //tempProp.setVendedor(tempVendedor);
        tempProp.setInspector(temInspector);
        tempProp.setTipoLocal(tempTipoLocal);
        tempProp.setZona(tempZona);
        tempProp.setDisponibilidad(valor);
        paraFila = abmPropiedad.guardarPropiedad(tempProp);
        //abmVendedor.actualizarCantidadVentas(tempVendedor.getIdVendedor());
        //Armo la fila nueva
        modelo.addRow(new Object[]{paraFila.getIdPropiedadInmueble(), paraFila.getZona().getNombre(), paraFila.getDireccion(),
            paraFila.getTipoLocal().getNombre(), paraFila.getPrecioTrazado(), paraFila.getEstadoLocal().getNombre(),
            paraFila.getInspector().toString(), paraFila.isDisponibilidad(),
            paraFila.getPropietario().toString(), paraFila.getCaracteristicasString(), paraFila.getAccesibilidad()});
    }//GEN-LAST:event_jbtAgregarActionPerformed

    private void jbtModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtModificarActionPerformed
        // Construyo los objetos para el objeto inmueble
        controlBaja = abmPropiedad.estaAlquilada(Integer.parseInt(jLIdPropiedad.getText()));
        boolean valor = false;
            if (jcbDisponibilidad.getSelectedIndex() == 1) {
                valor = true;
            }
        if (controlBaja && valor==false) {
            JOptionPane.showMessageDialog(this, "La propiedad está alquilada\n no se puede dar de baja");
        } else {
            jLabelOcultaFilaNum.setVisible(false);
            tempProp = new PropiedadInmueble();
            tempPropietario = abmProp.buscopPropietario(jcbListaPropietarios.getSelectedIndex() + 1);
            temInspector = abmInspector.buscoInspector(jcbInspector.getSelectedIndex() + 1);
            tempEstadoLocal = abmEstadoLocal.buscoEstadoLocal(jcbEstadoLocal.getSelectedIndex() + 1);
            tempTipoLocal = abmTipoLocal.buscoTipoLocal(jcbTipoLocal.getSelectedIndex() + 1);
            //tempVendedor = abmVendedor.buscoVendedor(jcbVendedor.getSelectedIndex() + 1);
            tempZona = abmZona.buscarZona(jcbZona.getSelectedIndex() + 1);
            
            //Construyo el inmueble para modificarlo en la base
            tempProp.setIdPropiedadInmueble(Integer.parseInt(jLIdPropiedad.getText()));
            tempProp.setPropietario(tempPropietario);
            tempProp.setAccesibilidad(jtAccesibilidad.getText());
            tempProp.setCaracteristicasString(jtCaracteristicas.getText());
            tempProp.setDireccion(jtDireccion.getText());
            tempProp.setEstadoLocal(tempEstadoLocal);
            tempProp.setPrecioTrazado(Float.valueOf(jtPrecio.getText()));
            //tempProp.setVendedor(tempVendedor);
            tempProp.setInspector(temInspector);
            tempProp.setTipoLocal(tempTipoLocal);
            tempProp.setZona(tempZona);
            tempProp.setDisponibilidad(valor);
            abmPropiedad.modificarpropiedad(tempProp);
            //int fila=Integer.parseInt(jLabelOcultaFilaNum.getText());
            //modelo.removeRow(Integer.parseInt(jLabelOcultaFilaNum.getText()));
            //modelo.addRow(new Object[fila]);
            filasTablaResultadoXPropietario();
        }

    }//GEN-LAST:event_jbtModificarActionPerformed

    private void jTablaBusquedaPropMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablaBusquedaPropMouseClicked
        // Tomo los datos de la fila seleccionada y los cargo en los campos de el formulario
        jLabelOcultaFilaNum.setVisible(false);
        int valor = jTablaBusquedaProp.getSelectedRow();
        control = true;
        jbtAgregar.setEnabled(false);
        jbtModificar.setEnabled(true);
        jLabelOcultaFilaNum.setText(String.valueOf(valor));
        //Seteo el valor de la Zona en el combo
        int propZonajcb = 0;
        String propZonaFila = String.valueOf(modelo.getValueAt(valor, 1));
        for (Zona listaZona : listaZonas) {
            if (listaZona.getNombre().equals(propZonaFila)) {
                propZonajcb = listaZona.getIdZona() - 1;
            }
        }
        jcbZona.setSelectedIndex(propZonajcb);
        // Seteo el valor de Tipo Local en el combo 
        int propTipojcb = 0;
        String propTipoFila = String.valueOf(modelo.getValueAt(valor, 3));
        for (TipoLocal tipo : listaTipoLocal) {
            if (tipo.getNombre().equals(propTipoFila)) {
                propTipojcb = tipo.getIdTipoLocal() - 1;
            }
        }
        jcbTipoLocal.setSelectedIndex(propTipojcb);
        // Seteo el valo Estado Local en el combo 
        int propEstadojcb = 0;
        String propEstadoFila = String.valueOf(modelo.getValueAt(valor, 5));
        for (EstadoLocal estadoLocal : listaEstadoLocal) {
            if (estadoLocal.getNombre().equals(propEstadoFila)) {
                propEstadojcb = estadoLocal.getIdEstadoLocal() - 1;
            }
        }
        jcbEstadoLocal.setSelectedIndex(propEstadojcb);
        //Seteo el valor de Inspector en el combo 
        int propInspectorjcb = 0;
        String propInspectorFila = String.valueOf(modelo.getValueAt(valor, 6));
        for (Inspector inspData : listaInspector) {
            if (inspData.toString().equals(propInspectorFila)) {
                propInspectorjcb = inspData.getIdInspector() - 1;
            }
        }
        jcbInspector.setSelectedIndex(propInspectorjcb);

        //Seteo el valor de la Disponibilidad en el combo
        String valordisponibilidad = String.valueOf(modelo.getValueAt(valor, 7));
        if (valordisponibilidad.equals("Activo")) {
            jcbDisponibilidad.setSelectedIndex(1);
        } else {
            jcbDisponibilidad.setSelectedIndex(2);
        }
        //Seteo los campos de texto 
        jtAccesibilidad.setText(String.valueOf(modelo.getValueAt(valor, 10)));
        jtAccesibilidad.setForeground(Color.black);
        jtCaracteristicas.setText(String.valueOf(modelo.getValueAt(valor, 9)));
        jtCaracteristicas.setForeground(Color.black);
        jtDireccion.setText(String.valueOf(modelo.getValueAt(valor, 2)));
        jtDireccion.setForeground(Color.black);
        jtPrecio.setText(String.valueOf(modelo.getValueAt(valor, 4)));
        jtPrecio.setForeground(Color.black);
        jLIdPropiedad.setText(String.valueOf(modelo.getValueAt(valor, 0)));
        habilitoCamposModificar();
    }//GEN-LAST:event_jTablaBusquedaPropMouseClicked

    private void jbtHabiltarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtHabiltarCamposActionPerformed
        // habilito el campo zona para empezar el proceso de agregar una propiedad
        reinicioCampos();
        camposInicialTabAgregar();
        jcbZona.setEnabled(true);
        if (control == true) {
            control = false;
        }
    }//GEN-LAST:event_jbtHabiltarCamposActionPerformed

    private void jcbZonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbZonaActionPerformed
        // Si el item elegido es mayor a 0 habilito el campo siguiente
        
        if (jcbZona.getSelectedIndex() > 0) {
            tempZona = abmZona.buscarZona(jcbZona.getSelectedIndex()+1);
            if(tempZona.isEstado()){
                jcbTipoLocal.setEnabled(true);
                jLabelZonaInactiva.setText("");
            }else{
                jLabelZonaInactiva.setText("Desactivada");
                jcbTipoLocal.setEnabled(false);
                jcbEstadoLocal.setEnabled(false);
                jcbInspector.setEnabled(false);
                jtAccesibilidad.setEnabled(false);
                jtCaracteristicas.setEnabled(false);
                jtDireccion.setEnabled(false);
                jtPrecio.setEnabled(false);
                jcbDisponibilidad.setEnabled(false);
                jbtAgregar.setEnabled(false);
                jbtModificar.setEnabled(false);
            }
        } else {
            jcbTipoLocal.setEnabled(false);
            if (jbtAgregar.isEnabled()) {
                jbtAgregar.setEnabled(false);
            }
            if (jcbEstadoLocal.isEnabled()) {
                jcbEstadoLocal.setEnabled(false);
            }
            if (jcbInspector.isEnabled()) {
                jcbInspector.setEnabled(false);
            }
            if (jtAccesibilidad.isEnabled()) {
                jtAccesibilidad.setEnabled(false);
            }
            if (jtCaracteristicas.isEnabled()) {
                jtCaracteristicas.setEnabled(false);
            }
            if (jtDireccion.isEnabled()) {
                jtDireccion.setEnabled(false);
            }
            if (jtPrecio.isEnabled()) {
                jtPrecio.setEnabled(false);
            }
            if (jcbDisponibilidad.isEnabled()) {
                jcbDisponibilidad.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jcbZonaActionPerformed

    private void jcbTipoLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTipoLocalActionPerformed
        // Si el item elegido es mayor a 0 habilito el campo siguiente
        if (jcbTipoLocal.getSelectedIndex() > 0) {
            jcbEstadoLocal.setEnabled(true);
        } else {
            jcbEstadoLocal.setEnabled(false);
            if (jbtAgregar.isEnabled()) {
                jbtAgregar.setEnabled(false);
            }
            if (jcbInspector.isEnabled()) {
                jcbInspector.setEnabled(false);
            }
//            if (jcbVendedor.isEnabled()) {
//                jcbVendedor.setEnabled(false);
//            }
            if (jtAccesibilidad.isEnabled()) {
                jtAccesibilidad.setEnabled(false);
            }
            if (jtCaracteristicas.isEnabled()) {
                jtCaracteristicas.setEnabled(false);
            }
            if (jtDireccion.isEnabled()) {
                jtDireccion.setEnabled(false);
            }
            if (jtPrecio.isEnabled()) {
                jtPrecio.setEnabled(false);
            }
            if (jcbDisponibilidad.isEnabled()) {
                jcbDisponibilidad.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jcbTipoLocalActionPerformed

    private void jcbEstadoLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbEstadoLocalActionPerformed
        // si el item elegido en mayor a 0 habilito el campo siguinte
        if (jcbEstadoLocal.getSelectedIndex() > 0) {
            jcbInspector.setEnabled(true);
        } else {
            jcbInspector.setEnabled(false);
            if (jbtAgregar.isEnabled()) {
                jbtAgregar.setEnabled(false);
            }
//            if (jcbVendedor.isEnabled()) {
//                jcbVendedor.setEnabled(false);
//            }
            if (jtAccesibilidad.isEnabled()) {
                jtAccesibilidad.setEnabled(false);
            }
            if (jtCaracteristicas.isEnabled()) {
                jtCaracteristicas.setEnabled(false);
            }
            if (jtDireccion.isEnabled()) {
                jtDireccion.setEnabled(false);
            }
            if (jtPrecio.isEnabled()) {
                jtPrecio.setEnabled(false);
            }
            if (jcbDisponibilidad.isEnabled()) {
                jcbDisponibilidad.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jcbEstadoLocalActionPerformed

    private void jcbInspectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbInspectorActionPerformed
        // si el item elegido es mayor a 0 hebilito el campo siguiente
        if (jcbInspector.getSelectedIndex() > 0) {
            jtAccesibilidad.setEnabled(true);
        } else {
            if (jtAccesibilidad.isEnabled()) {
                jtAccesibilidad.setEnabled(false);
            }
            if (jtCaracteristicas.isEnabled()) {
                jtCaracteristicas.setEnabled(false);
            }
            if (jtDireccion.isEnabled()) {
                jtDireccion.setEnabled(false);
            }
            if (jtPrecio.isEnabled()) {
                jtPrecio.setEnabled(false);
            }
            if (jcbDisponibilidad.isEnabled()) {
                jcbDisponibilidad.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jcbInspectorActionPerformed

    private void jtAccesibilidadFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtAccesibilidadFocusGained
        // Al hacer foco borro la palbra por defecto y seteo el campo 
        if (jtAccesibilidad.getText().equals("Accesibilidad")) {
            jtAccesibilidad.setText("");
            jtAccesibilidad.setForeground(Color.black);
        } else {
            jtAccesibilidad.selectAll();
        }
    }//GEN-LAST:event_jtAccesibilidadFocusGained

    private void jtAccesibilidadKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtAccesibilidadKeyReleased
        // Chequeo que no quede vacío
        if (jtAccesibilidad.getText().isEmpty()) {
            jLAdvertenciaAccesibilidad.setFont(new Font("Liberation Sans", Font.PLAIN, 13));
            jLAdvertenciaAccesibilidad.setText("No puede estar vacío");
            jLAdvertenciaAccesibilidad.setForeground(Color.red.darker());
            if (jtCaracteristicas.isEnabled()) {
                jtCaracteristicas.setEnabled(false);
            }
            if (jtDireccion.isEnabled()) {
                jtDireccion.setEnabled(false);
            }
            if (jtPrecio.isEnabled()) {
                jtPrecio.setEnabled(false);
            }
            if (jcbDisponibilidad.isEnabled()) {
                jcbDisponibilidad.setEnabled(false);
            }
            if (jbtAgregar.isEnabled()) {
                jbtAgregar.setEnabled(false);
            }
        } else {
            jLAdvertenciaAccesibilidad.setText("");
            jtCaracteristicas.setEnabled(true);
        }
    }//GEN-LAST:event_jtAccesibilidadKeyReleased

    private void jtAccesibilidadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtAccesibilidadFocusLost
        // Si está vacío lo completo con la palabra por defecto
        if (jtAccesibilidad.getText().isEmpty()) {
            jtAccesibilidad.setText("Accesibilidad");
            jtAccesibilidad.setForeground(Color.gray);
        }

    }//GEN-LAST:event_jtAccesibilidadFocusLost

    private void jtCaracteristicasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtCaracteristicasFocusGained
        // Seteo el campo para que sea completado
        if (jtCaracteristicas.getText().equals("Caracteristicas")) {
            jtCaracteristicas.setText("");
            jtCaracteristicas.setForeground(Color.black);
        } else {
            jtCaracteristicas.selectAll();
        }
    }//GEN-LAST:event_jtCaracteristicasFocusGained

    private void jtCaracteristicasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtCaracteristicasFocusLost
        // Si se sale de el foco y está vacío lo inicializo por defecto
        if (jtCaracteristicas.getText().isEmpty()) {
            jtCaracteristicas.setText("Caracteristicas");
            jtCaracteristicas.setForeground(Color.gray);
        }
    }//GEN-LAST:event_jtCaracteristicasFocusLost

    private void jtCaracteristicasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtCaracteristicasKeyReleased
        // Chequeo que no quede vacío el campo
        if (jtCaracteristicas.getText().isEmpty()) {
            jLAdvertenciaCaracteristicas.setFont(new Font("Liberation Sans", Font.PLAIN, 13));
            jLAdvertenciaCaracteristicas.setForeground(Color.red.darker());
            jLAdvertenciaCaracteristicas.setText("No puede estar vacío");
            if (jtDireccion.isEnabled()) {
                jtDireccion.setEnabled(false);
            }
            if (jtPrecio.isEnabled()) {
                jtPrecio.setEnabled(false);
            }
            if (jcbDisponibilidad.isEnabled()) {
                jcbDisponibilidad.setEnabled(false);
            }
            if (jbtAgregar.isEnabled()) {
                jbtAgregar.setEnabled(false);
            }
        } else {
            jLAdvertenciaCaracteristicas.setText("");
            jtCaracteristicas.setForeground(Color.black);
            jtDireccion.setEnabled(true);
        }
    }//GEN-LAST:event_jtCaracteristicasKeyReleased

    private void jtDireccionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtDireccionFocusGained
        // Seteo el campo para ser llenado
        if (jtDireccion.getText().equals("Dirección")) {
            jtDireccion.setText("");
            jtDireccion.setForeground(Color.black);
        } else {
            jtCaracteristicas.selectAll();
        }
    }//GEN-LAST:event_jtDireccionFocusGained

    private void jtDireccionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtDireccionFocusLost
        // si sale de el foco y lo deja vacío lo seteo por defecto
        if (jtDireccion.getText().isEmpty()) {
            jtDireccion.setText("Dirección");
            jtDireccion.setForeground(Color.gray);
        }
    }//GEN-LAST:event_jtDireccionFocusLost

    private void jtDireccionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtDireccionKeyReleased
        // Si empieza escribir chequeo que no lo deje vacío y seteo el campo
        if (jtDireccion.getText().isEmpty()) {
            jLAdvertenciaDireccion.setFont(new Font("Liberation Sans", Font.PLAIN, 13));
            jLAdvertenciaDireccion.setForeground(Color.red.darker());
            jLAdvertenciaDireccion.setText("No puede estar vacío");
            if (jtPrecio.isEnabled()) {
                jtPrecio.setEnabled(false);
            }
            if (jcbDisponibilidad.isEnabled()) {
                jcbDisponibilidad.setEnabled(false);
            }
            if (jbtAgregar.isEnabled()) {
                jbtAgregar.setEnabled(false);
            }
        } else {
            jLAdvertenciaDireccion.setText("");
            jtDireccion.setForeground(Color.black);
            jtPrecio.setEnabled(true);
            //contador=0;
        }
    }//GEN-LAST:event_jtDireccionKeyReleased

    private void jtPrecioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtPrecioFocusGained
        // Seteo el campo para empezar a completarlo
        if (jtPrecio.getText().equals("Precio")) {
            jtPrecio.setText("");
        }
    }//GEN-LAST:event_jtPrecioFocusGained

    private void jtPrecioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtPrecioFocusLost
        // si sale de el foco sin completar el campo lo seteo por defecto
        if (jtPrecio.getText().isEmpty()) {
            jtPrecio.setText("Precio");
            jtPrecio.setForeground(Color.gray);
        } else {
            jtPrecio.selectAll();
        }
    }//GEN-LAST:event_jtPrecioFocusLost

    private void jtPrecioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtPrecioKeyReleased
        // Chequeo que el campo no este vacío y que sea un número de tipo float
        jLAdvertenciaPrecio.setFont(new Font("Liberation Sans", Font.PLAIN, 13));
        jLAdvertenciaPrecio.setForeground(Color.red.darker());
        if (jtPrecio.getText().isEmpty()) {
            jLAdvertenciaPrecio.setText("No puede estar vacío");
            if (jcbDisponibilidad.isEnabled()) {
                jcbDisponibilidad.setEnabled(false);
            }
            if (jbtAgregar.isEnabled()) {
                jbtAgregar.setEnabled(false);
            }
        } else {
            jLAdvertenciaPrecio.setText("");
            jtPrecio.setForeground(Color.black);
            String tomoTexto = "";
            char[] aChar = jtPrecio.getText().toCharArray();
            int contador = 0;
            for (int i = 0; i < aChar.length; i++) {
                tomoTexto = String.valueOf(aChar[i]);
                if (tomoTexto.equals(".")) {
                    contador++;
                }
                if (contador > 1) {
                    jLAdvertenciaPrecio.setText("Solo un punto");
                    jcbDisponibilidad.setEnabled(false);
                    if (jbtAgregar.isEnabled()) {
                        jbtAgregar.setEnabled(false);
                    }
                    break;
                } else {
                    if (!tomoTexto.matches("[0123456789.]*")) {
                        jLAdvertenciaPrecio.setText("Solo números Reales");
                        if (jcbDisponibilidad.isEnabled()) {
                            jcbDisponibilidad.setEnabled(false);
                        }
                        if (jbtAgregar.isEnabled()) {
                            jbtAgregar.setEnabled(false);
                        }
                        break;
                    } else {
                        jLAdvertenciaPrecio.setText("");
                        jcbDisponibilidad.setEnabled(true);
                    }
                }

            }
        }
    }//GEN-LAST:event_jtPrecioKeyReleased

    private void jcbDisponibilidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbDisponibilidadActionPerformed
        // Chqueo que se seleccione alguna opción válida
        if (control == false) {
            if (jcbDisponibilidad.getSelectedIndex() > 0) {
                jbtAgregar.setEnabled(true);
            } else {
                jbtAgregar.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jcbDisponibilidadActionPerformed

    private void jbtCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtCancelarActionPerformed
        // Resetoe todo a 0
        borroFilas();
        reinicioCampos();
        camposInicialTabAgregar();
        jcbListaPropietarios.removeAllItems();
        comboPropietarios();
    }//GEN-LAST:event_jbtCancelarActionPerformed

    private void jcbBusquedaXZonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbBusquedaXZonaActionPerformed
        // Busco las propiedades por la zona seleccionada
        borroFilasZona();
        Zona z = new Zona();
        z = (Zona) jcbBusquedaXZona.getSelectedItem();
        if (z.isEstado()) {
            ZonaDeBaja.setVisible(false);
        } else {
            ZonaDeBaja.setVisible(true);
        }

        if (jcbBusquedaXZona.getSelectedIndex() > 0) {

            listaXZona = abmPropiedad.busquedaXZona(z.getIdZona());
            for (PropiedadInmueble propiedaZona : listaXZona) {
                modeloZona.addRow(new Object[]{propiedaZona.getIdPropiedadInmueble(), propiedaZona.getZona().getNombre(),
                    propiedaZona.getDireccion(), propiedaZona.getTipoLocal().getNombre(), propiedaZona.getPrecioTrazado(),
                    propiedaZona.getEstadoLocal().getNombre(), propiedaZona.getInspector().toString(), propiedaZona.isDisponibilidad(),
                    propiedaZona.getPropietario().toString(), propiedaZona.getCaracteristicasString(),
                    propiedaZona.getAccesibilidad()});
            }
        }
    }//GEN-LAST:event_jcbBusquedaXZonaActionPerformed

    private void jtPrecioInicialKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtPrecioInicialKeyReleased
        // chequeo que en el campo se ingrese un número real
        String numInicial = "";
        char[] valorCampo = jtPrecioInicial.getText().toCharArray();
        int contador = 0;

        jErrorEtiquetaPrecioInicial.setFont(new Font("Liberation Sans", Font.PLAIN, 13));
        jErrorEtiquetaPrecioInicial.setForeground(Color.red.darker());
        if (jtPrecioInicial.getText().isEmpty()) {
            jErrorEtiquetaPrecioInicial.setText("No puede estar vacío");
            if (jtPrecioFinal.isEnabled()) {
                jtPrecioFinal.setEnabled(false);
            }
            if (jbtBuscarXPrecio.isEnabled()) {
                jbtBuscarXPrecio.setEnabled(false);
            }
        } else {
            for (int i = 0; i < valorCampo.length; i++) {
                numInicial = String.valueOf(valorCampo[i]);
                if (numInicial.equals(".")) {
                    contador++;
                }
                if (contador > 1) {
                    jErrorEtiquetaPrecioInicial.setText("Solo un punto");
                    if (jtPrecioFinal.isEnabled()) {
                        jtPrecioFinal.setEnabled(false);
                    }
                    if (jbtBuscarXPrecio.isEnabled()) {
                        jbtBuscarXPrecio.setEnabled(false);
                    }
                    break;
                } else {
                    if (!numInicial.matches("[0123456789.]*")) {
                        jErrorEtiquetaPrecioInicial.setText("Solo números reales");
                        if (jbtBuscarXPrecio.isEnabled()) {
                            jbtBuscarXPrecio.setEnabled(false);
                        }
                        if (jtPrecioFinal.isEnabled()) {
                            jtPrecioFinal.setEnabled(false);
                        }
                        break;
                    } else {
                        jErrorEtiquetaPrecioInicial.setText("");
                        jtPrecioFinal.setEnabled(true);
                    }
                }
            }
        }
    }//GEN-LAST:event_jtPrecioInicialKeyReleased

    private void jtPrecioInicialFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtPrecioInicialFocusGained
        // Al ganar el foco seteo el campo para iniciar su llenado
        if (jtPrecioInicial.getText().equals("Precio Inicial")) {
            jtPrecioInicial.setText("");
            jtPrecioInicial.setForeground(Color.black);
        } else {
            jtPrecioInicial.selectAll();
        }
    }//GEN-LAST:event_jtPrecioInicialFocusGained

    private void jtPrecioInicialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtPrecioInicialFocusLost
        // Chequeo que si el campo está vacío lo seteo por defecto
        if (jtPrecioInicial.getText().isEmpty()) {
            jtPrecioInicial.setText("Precio Inicial");
            jtPrecioInicial.setForeground(Color.gray);
        }
    }//GEN-LAST:event_jtPrecioInicialFocusLost

    private void jtPrecioFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtPrecioFinalFocusGained
        // Al ganr el foco seteo el campo para empezar su edición
        if (jtPrecioFinal.getText().equals("Precio Final")) {
            jtPrecioFinal.setText("");
            jtPrecioFinal.setForeground(Color.black);
        } else {
            jtPrecioFinal.selectAll();
        }
    }//GEN-LAST:event_jtPrecioFinalFocusGained

    private void jtPrecioFinalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtPrecioFinalFocusLost
        // Chequeo que si el campa está vacío lo seteo por defecto
        if (jtPrecioFinal.getText().isEmpty()) {
            jtPrecioFinal.setText("Precio Final");
            jtPrecioFinal.setForeground(Color.gray);
        }
    }//GEN-LAST:event_jtPrecioFinalFocusLost

    private void jtPrecioFinalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtPrecioFinalKeyReleased
        // Chequeo que los datos ingresados sean correctos
        String valorIngresado = "";
        char[] armoCadena = jtPrecioFinal.getText().toCharArray();
        int contador = 0;
        jErrorEtiquetaPrecioFinal.setFont(new Font("Liberation Sans", Font.PLAIN, 13));
        jErrorEtiquetaPrecioFinal.setForeground(Color.red.darker());
        if (jtPrecioFinal.getText().isEmpty()) {
            jErrorEtiquetaPrecioFinal.setText("No pude estar vacío");
            if (jbtBuscarXPrecio.isEnabled()) {
                jbtBuscarXPrecio.setEnabled(false);
            }

        } else {
            for (int i = 0; i < armoCadena.length; i++) {
                valorIngresado = String.valueOf(armoCadena[i]);
                if (valorIngresado.equals(".")) {
                    contador++;
                }
                if (contador > 1) {
                    jErrorEtiquetaPrecioFinal.setText("Solo un punto");
                    if (jbtBuscarXPrecio.isEnabled()) {
                        jbtBuscarXPrecio.setEnabled(false);
                    }
                    break;
                } else {
                    if (!valorIngresado.matches("[0123456789.]*")) {
                        jErrorEtiquetaPrecioFinal.setText("Solo números reales");
                        if (jbtBuscarXPrecio.isEnabled()) {
                            jbtBuscarXPrecio.setEnabled(false);
                        }
                        break;
                    } else {
                        jErrorEtiquetaPrecioFinal.setText("");
                        jbtBuscarXPrecio.setEnabled(true);
                    }
                }
            }
        }

    }//GEN-LAST:event_jtPrecioFinalKeyReleased

    private void jbtBuscarXPrecioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jbtBuscarXPrecioFocusGained
        // Chequeo que el valor inicial sea menor que el final
        String creoInicial = jtPrecioInicial.getText() + "f";
        String creoFinal = jtPrecioFinal.getText() + "f";
        float valorInicia = Float.parseFloat(creoInicial);
        float valorFinal = Float.parseFloat(creoFinal);
        float resultado = valorFinal - valorInicia;
        if (resultado < 0) {
            jErrorBotonBuscar.setText("El valor inicial no puede ser mayor al final");
            jErrorBotonBuscar.setFont(new Font("Liberation Sans", Font.PLAIN, 13));
            jErrorBotonBuscar.setForeground(Color.red.darker());
            jtPrecioInicial.requestFocus();
            jbtBuscarXPrecio.setEnabled(false);
        } else {
            jErrorBotonBuscar.setText("");
        }
    }//GEN-LAST:event_jbtBuscarXPrecioFocusGained

    private void jbtBuscarXPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtBuscarXPrecioActionPerformed
        // Salgo a buscar las propiedades que se encuentren en el rango de precios
        borroFilaPrecio();
        String tomoInicio = jtPrecioInicial.getText() + "f";
        String tomoFinal = jtPrecioFinal.getText() + "f";
        float vInicial = Float.parseFloat(tomoInicio);
        float vFinal = Float.parseFloat(tomoFinal);
        List<PropiedadInmueble> listaPrecio = new ArrayList();
        listaPrecio = abmPropiedad.rangoPrecios(vInicial, vFinal);
        for (PropiedadInmueble inmu : listaPrecio) {

            String valorActivo = "";
            if (inmu.isDisponibilidad()) {
                valorActivo = "Activo";
            } else {
                valorActivo = "Inactivo";
            }
            modeloPrecio.addRow(new Object[]{inmu.getIdPropiedadInmueble(), inmu.getZona().getNombre(), inmu.getDireccion(),
                inmu.getTipoLocal().getNombre(), inmu.getPrecioTrazado(), inmu.getEstadoLocal().getNombre(),
                inmu.getInspector().toString(), valorActivo, inmu.getPropietario().toString(),
                inmu.getCaracteristicasString(), inmu.getAccesibilidad()});
        }
    }//GEN-LAST:event_jbtBuscarXPrecioActionPerformed

    private void jcbBusquedaXTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbBusquedaXTipoActionPerformed
        // Armo el combox para los Tipos
        borroFilaxTipo();
        if (jcbBusquedaXTipo.getSelectedIndex() > 0) {
            listaxTipo = abmPropiedad.listadoInmueblexTipo(jcbBusquedaXTipo.getSelectedIndex() + 1);
            String valorActivo = "";
            for (PropiedadInmueble inmu : listaxTipo) {
                if (inmu.isDisponibilidad()) {
                    valorActivo = "Activo";
                } else {
                    valorActivo = "Inactivo";
                }
                modeloxTipo.addRow(new Object[]{inmu.getIdPropiedadInmueble(), inmu.getZona().getNombre(), inmu.getDireccion(),
                    inmu.getTipoLocal().getNombre(), inmu.getPrecioTrazado(), inmu.getEstadoLocal().getNombre(),
                    inmu.getInspector().toString(), valorActivo, inmu.getPropietario().toString(),
                    inmu.getCaracteristicasString(), inmu.getAccesibilidad()});
            }
        }
    }//GEN-LAST:event_jcbBusquedaXTipoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ZonaDeBaja;
    private javax.swing.JTabbedPane jCapasPanelBusquedas;
    private javax.swing.JLabel jErrorBotonBuscar;
    private javax.swing.JLabel jErrorEtiquetaPrecioFinal;
    private javax.swing.JLabel jErrorEtiquetaPrecioInicial;
    private javax.swing.JLabel jLAdvertenciaAccesibilidad;
    private javax.swing.JLabel jLAdvertenciaCaracteristicas;
    private javax.swing.JLabel jLAdvertenciaDireccion;
    private javax.swing.JLabel jLAdvertenciaPrecio;
    private javax.swing.JLabel jLIdPropiedad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelEstadoLocal;
    private javax.swing.JLabel jLabelInspector;
    private javax.swing.JLabel jLabelOcultaFilaNum;
    private javax.swing.JLabel jLabelTipoLocal;
    private javax.swing.JLabel jLabelZona;
    private javax.swing.JLabel jLabelZonaInactiva;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelAgregar;
    private javax.swing.JPanel jPanelDatos;
    private javax.swing.JPanel jPanelxPrecio;
    private javax.swing.JPanel jPanelxTipo;
    private javax.swing.JPanel jPanelxZona;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTablaBusquedaProp;
    private javax.swing.JTable jTablaResltadoxPrecio;
    private javax.swing.JTable jTablaZonas;
    private javax.swing.JTable jTablaxTipo;
    private javax.swing.JButton jbtAgregar;
    private javax.swing.JButton jbtAgregarPropietario;
    private javax.swing.JButton jbtBuscarXPrecio;
    private javax.swing.JButton jbtCancelar;
    private javax.swing.JButton jbtHabiltarCampos;
    private javax.swing.JButton jbtModificar;
    private javax.swing.JComboBox<String> jcbBusquedaXTipo;
    private javax.swing.JComboBox<String> jcbBusquedaXZona;
    private javax.swing.JComboBox<String> jcbDisponibilidad;
    private javax.swing.JComboBox<String> jcbEstadoLocal;
    private javax.swing.JComboBox<String> jcbInspector;
    private javax.swing.JComboBox<String> jcbListaPropietarios;
    private javax.swing.JComboBox<String> jcbTipoLocal;
    private javax.swing.JComboBox<String> jcbZona;
    private javax.swing.JTextField jtAccesibilidad;
    private javax.swing.JTextField jtCaracteristicas;
    private javax.swing.JTextField jtDireccion;
    private javax.swing.JTextField jtPrecio;
    private javax.swing.JTextField jtPrecioFinal;
    private javax.swing.JTextField jtPrecioInicial;
    // End of variables declaration//GEN-END:variables

    public void armoTabla() {
        modelo.addColumn("id"); //0
        modelo.addColumn("Zona"); //1
        modelo.addColumn("Dirección"); //2
        modelo.addColumn("Tipo local"); //3
        modelo.addColumn("Precio"); //4
        modelo.addColumn("Estado local"); //5
        modelo.addColumn("Inspector"); //6
        modelo.addColumn("Disponibilidad"); //7
        modelo.addColumn("Propietario"); //8
        modelo.addColumn("Caracteristicas"); //9
        modelo.addColumn("Accesibilidad"); //10
        jTablaBusquedaProp.setModel(modelo);
    }

    public void armoTablaZona() {
        modeloZona.addColumn("id"); //0
        modeloZona.addColumn("Zona"); //1
        modeloZona.addColumn("Dirección"); //2
        modeloZona.addColumn("Tipo local"); //3
        modeloZona.addColumn("Precio"); //4
        modeloZona.addColumn("Estado local"); //5
        modeloZona.addColumn("Inspector"); //6
        modeloZona.addColumn("Disponibilidad"); //7
        modeloZona.addColumn("Propietario"); //8
        modeloZona.addColumn("Caracteristicas"); //9
        modeloZona.addColumn("Accesibilidad"); //10
        jTablaZonas.setModel(modeloZona);
    }

    public void armoTablaRangoPrecios() {
        modeloPrecio.addColumn("id"); //0
        modeloPrecio.addColumn("Zona"); //1
        modeloPrecio.addColumn("Dirección"); //2
        modeloPrecio.addColumn("Tipo local"); //3
        modeloPrecio.addColumn("Precio"); //4
        modeloPrecio.addColumn("Estado local"); //5
        modeloPrecio.addColumn("Inspector"); //6
        modeloPrecio.addColumn("Disponibilidad"); //7
        modeloPrecio.addColumn("Propietario"); //8
        modeloPrecio.addColumn("Caracteristicas"); //9
        modeloPrecio.addColumn("Accesibilidad"); //10
        jTablaResltadoxPrecio.setModel(modeloPrecio);
    }

    public void armoTablaxTipo() {
        modeloxTipo.addColumn("id"); //0
        modeloxTipo.addColumn("Zona"); //1
        modeloxTipo.addColumn("Dirección"); //2
        modeloxTipo.addColumn("Tipo local"); //3
        modeloxTipo.addColumn("Precio"); //4
        modeloxTipo.addColumn("Estado local"); //5
        modeloxTipo.addColumn("Inspector"); //6
        modeloxTipo.addColumn("Disponibilidad"); //7
        modeloxTipo.addColumn("Propietario"); //8
        modeloxTipo.addColumn("Caracteristicas"); //9
        modeloxTipo.addColumn("Accesibilidad"); //10
        jTablaxTipo.setModel(modeloxTipo);
    }

    public void comboPropietarios() {
        listaPropietarios = abmProp.listarPropietario();
        for (Propietario prop : listaPropietarios) {
            modelComboProp.addElement(prop);
        }
        jcbListaPropietarios.setModel(modelComboProp);
    }

    public void comboZonas() {
        listaZonas = abmZona.listarZonas();
        for (Zona zona : listaZonas) {
                modelComboZona.addElement(zona);
        }
        jcbZona.setModel(modelComboZona);
    }

    public void combozonaXbusqueda() {
        listaZonas = abmZona.listarZonas();
        for (Zona xZona : listaZonas) {
            modelBusquedaXZona.addElement(xZona);
        }
        jcbBusquedaXZona.setModel(modelBusquedaXZona);
    }

    public void comboBusquedaxTipo() {
        listaTipoLocal = abmTipoLocal.listarTipoLocal();
        for (TipoLocal tpl : listaTipoLocal) {
            modelBusquedazTipo.addElement(tpl);
        }
        jcbBusquedaXTipo.setModel(modelBusquedazTipo);
    }

    public void comboEstadoLocal() {
        listaEstadoLocal = abmEstadoLocal.listadoLocales();
        for (EstadoLocal estadoLocal : listaEstadoLocal) {
            modelComboEstadoLocal.addElement(estadoLocal.getNombre());
        }
        jcbEstadoLocal.setModel(modelComboEstadoLocal);
    }

    public void comboTipoLocal() {
        listaTipoLocal = abmTipoLocal.listarTipoLocal();
        for (TipoLocal tipoLocal : listaTipoLocal) {
            modelComboTipoLocal.addElement(tipoLocal.getNombre());
        }
        jcbTipoLocal.setModel(modelComboTipoLocal);
    }

    public void comboInspector() {
        listaInspector = abmInspector.listadoInspectoeresJCB();
        for (Inspector inspector : listaInspector) {
            if (inspector.isEstado()) {
                modelComboInspector.addElement(inspector);
            }
        }
        jcbInspector.setModel(modelComboInspector);
    }

//    public void comboVendedor() {
////        listaVendedor = abmVendedor.listadoVendedor();
////        for (Vendedor vendedor : listaVendedor) {
////            modelComboVendedor.addElement(vendedor);
////        }
////        jcbVendedor.setModel(modelComboVendedor);
//    }
    public void comboDisponibilidad() {
        jcbDisponibilidad.addItem("Seleccionar");
        jcbDisponibilidad.addItem("Activo");
        jcbDisponibilidad.addItem("Inactivo");
    }

    public void camposInicialTabAgregar() {
        jtAccesibilidad.setEnabled(false);
        jtCaracteristicas.setEnabled(false);
        jtDireccion.setEnabled(false);
        jtPrecio.setEnabled(false);
        jbtAgregar.setEnabled(false);
        jbtModificar.setEnabled(false);
        jLIdPropiedad.setEnabled(false);
        jLabelOcultaFilaNum.setEnabled(false);
        //jbtAgregarPropietario.setEnabled(false);
        jcbZona.setEnabled(false);
        jcbTipoLocal.setEnabled(false);
        jcbEstadoLocal.setEnabled(false);
        jcbInspector.setEnabled(false);
        //jcbVendedor.setEnabled(false);
        jcbDisponibilidad.setEnabled(false);
        jbtHabiltarCampos.setEnabled(false);
        jLAdvertenciaAccesibilidad.setText("");
        jLAdvertenciaCaracteristicas.setText("");
        jLAdvertenciaDireccion.setText("");
        jLAdvertenciaPrecio.setText("");
        //jCapasPanelBusquedas.setEnabledAt(3, false);
    }

    private void habilitoCamposModificar() {
        jcbZona.setEnabled(true);
        jcbTipoLocal.setEnabled(true);
        jcbEstadoLocal.setEnabled(true);
        jcbInspector.setEnabled(true);
        //jcbVendedor.setEnabled(true);
        jtAccesibilidad.setEnabled(true);
        jtCaracteristicas.setEnabled(true);
        jtDireccion.setEnabled(true);
        jtPrecio.setEnabled(true);
        jcbDisponibilidad.setEnabled(true);
    }

    private void reinicioCampos() {
        jcbZona.removeAllItems();
        comboZonas();
        jcbTipoLocal.removeAllItems();
        comboTipoLocal();
        jcbEstadoLocal.removeAllItems();
        comboEstadoLocal();
        jcbInspector.removeAllItems();
        comboInspector();
        //jcbVendedor.removeAllItems();
        //comboVendedor();
        jcbDisponibilidad.removeAllItems();
        comboDisponibilidad();
        if (jbtAgregar.isEnabled()) {
            jbtAgregar.setEnabled(false);
        }
        if (jbtModificar.isEnabled()) {
            jbtModificar.setEnabled(false);
        }
        jtAccesibilidad.setText("Accesibilidad");
        jtAccesibilidad.setForeground(Color.gray);
        jtCaracteristicas.setText("Caracteristicas");
        jtCaracteristicas.setForeground(Color.gray);
        jtDireccion.setText("Dirección");
        jtDireccion.setForeground(Color.gray);
        jtPrecio.setText("Precio");
        jLIdPropiedad.setText("Identificador");
        jtPrecio.setForeground(Color.gray);
    }

    private void camposInicioxTipo() {
        jtPrecioFinal.setEnabled(false);
        jbtBuscarXPrecio.setEnabled(false);
    }

    public void borroFilas() {
        int filas = modelo.getRowCount() - 1;
        for (int i = filas; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    private void borroFilasZona() {
        int fil = modeloZona.getRowCount() - 1;
        for (int i = fil; i >= 0; i--) {
            modeloZona.removeRow(i);
        }
    }

    private void borroFilaPrecio() {
        int f = modeloPrecio.getRowCount() - 1;
        for (int i = f; i >= 0; i--) {
            modeloPrecio.removeRow(i);
        }
    }

    private void borroFilaxTipo() {
        int laF = modeloxTipo.getRowCount() - 1;
        for (int i = laF; i >= 0; i--) {
            modeloxTipo.removeRow(i);
        }
    }

    private void filasTablaResultadoXPropietario() {
        borroFilas();
        if (jcbListaPropietarios.getSelectedIndex() > 0) {
            jbtHabiltarCampos.setEnabled(true);
            listaXIDProp = abmPropiedad.buscarxPropietarioZonaFiltrada(jcbListaPropietarios.getSelectedIndex() + 1);
            for (PropiedadInmueble inmueble : listaXIDProp) {
                //System.out.println("Muesto algo "+inmueble.getVendedor().toString());
                String valorActivo = "";
                if (inmueble.isDisponibilidad()) {
                    valorActivo = "Activo";
                } else {
                    valorActivo = "Inactivo";
                }
                modelo.addRow(new Object[]{inmueble.getIdPropiedadInmueble(), inmueble.getZona().getNombre(),
                    inmueble.getDireccion(), inmueble.getTipoLocal().getNombre(), inmueble.getPrecioTrazado(),
                    inmueble.getEstadoLocal().getNombre(), inmueble.getInspector().toString(),
                    valorActivo, inmueble.getPropietario().toString(),
                    inmueble.getCaracteristicasString(), inmueble.getAccesibilidad()});
            }
        } else {
            camposInicialTabAgregar();
        }
    }
}
